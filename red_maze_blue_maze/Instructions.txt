You can easily apply this template to an existing .blend file, if you wish. Just remember to place all the Python modules in the same file directory(folder, generally) as the .blend. Or, you could append/link your models into the template and go from there. In any case, I'll describe the process of applying the template to your character.

The player's collision is handled by a diamond-shaped collision mesh that hovers above the ground (for wall collisions), and a raycast in the script that detects the floor and pins the player to it. The collision mesh actually has no friction; sliding along the floor is not a concern because
ground collision is handled by a raycast. Another benefit of the raycast method is that it lets the player easily walk over small steps.

So, to make a collision mesh for your character, create a diamond shaped like the one in the template. The pointy ends are critical; flat ends will catch on ledges. Make the top vertex of the diamond as high as the top of the character's head, and the lower vertex of the diamond about as low as the highest step you want the player to be able to walk over (this will be important later). Even if you don't want him to walk over any steps, the lower vertex should be a bit higher than ground level. You could also just copy the collision mesh from my template, and scale and position it to suit your character model. If you do that, you'll be good to go as far as logic bricks and physics settings, but you'll still need to set up some Config settings- see Config Settings below.

Make sure the collision mesh is aligned with the character, and parent the character's armature to it. Then make sure the character's visual mesh is parented to his armature. Make sure the visual mesh has it's physics mode set to "No Collision". Set the collision mesh's physics mode to "Dynamic", and enable the "actor", "invisible", and "no sleeping" physics options.

It's also a good idea to vertex parent the skybox to the player's collision mesh, like I did in the template (althoug the skybox is hidden, press alt+H to see it in the editor).

Now, you need to add some logic bricks to the collision mesh, which handles all the logic for the character. Just copy the logic brick setup exactly from the collision mesh in the template. Than make sure the collision mesh has a game property called "Player".


Config Settings:

Now you the collision mesh set up properly, but you need to set some config settings. Open the file Config.py provided in the zip folder. Right at the top, you'll see the 'Player Settings' subheading- look there. The first setting you need to change is "Cam". Set it to the name of the camera object in your scene (if you have no camera, make one now. it's initial position and orientation are unimportant). Of course, if you're using my template as a base to append/link your own content into, you should be able to leave this setting as is. Right below that, you'll see the "Height" setting. This setting is important to get right. It dictates how far above ground level the center (and by center I mean object origin) of the collision mesh object should be placed (in Blender units_. If this isn't set right, the character will hover above the ground or sink into it. You can make a guess for now, and fine-tune it later once you test it.

The next setting you need to set is 'SpawnObjectName'. This dicatates the name of the object at which the player will spawn at at the start of the game (should probably be an Empty. If you don't have one, add one now). Once again, if you're just adding content into the tamplate .blend file, you might not have to change this, as there is already a spawn empty in the template. 

Then, look under the 'Stair and step settings' sunheading. Find the "Step" setting. Enter the height (in Blender units) of the lowest step you want your character to be able to walk down without detaching from the ground. It's important that the lowest point of the collision mesh be about this high above ground level, otherwise your character may stuck trying to walk up steps.

Next, go and set the 'Ledge Hang Settings' to the best of your knowledge. Remember, you can guess now, and fine-tune later. It's important to note that max and min grab height are set RELATIVE to player (collision mesh) center. So max grab height is actually the maximum distance above the player center a ledge can be to be grabbed. The most important setting to get right is "HangDistance". It should be close to, but very slightly greater than actual distance from center to the very furthest forward part of player collision mesh. Also set "HangHeight", which is again defined relative to player center (the player's hands should be about this high during his armature hanging action).

The last thing you need to do is make sure all the 'Animation Settings' are set properly. First, make sure the "Armature" setting is set to the name of the character's armature. Then, there are several animations you need to configure (Walk, Run, Fall, Idle, Hang, Climb, Death). Make sure the name propertyof each of these animations is set to the name of the corresponding action for your armature. If you don't have, for instance, a fall animation, you could use your idle animation as placeholder, or use your walk animation as placeholder for the run anim.

The climb armature action needs to be animated in a very specific way to look right with this template. It should start with the player in his regular hanging position, with his hands level to the ledge, and then climbing up and over the ledge, with the ENTIRE ARMATURE moving upwards. He should move upwards by an amount equal to the sum of the "Height" and the "HangHeight" settings. He should move forwards by an amount equal to the sum of the "HangDistance" and "ClimbLength" settings. The action should end with the player standing in his idle pose, but offset by the previously mentioned amounts.

One last thing to mention about ledge hand settings and the climb anim is that the amount of time to complete the ledge climbing sequence will always be equal to the number of frames specified by "ClimbAnim.endFrame".